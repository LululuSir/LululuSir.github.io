<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[[iOS/OC]iOS10.3.3上APNG不动]]></title>
    <url>%2F2018%2F05%2F04%2FiOS-OC-iOS10-3-3%E4%B8%8AAPNG%E4%B8%8D%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[0x0背景今年年初，2月份左右，有业务同学反馈，有1张APNG动图，在其他系统上都OK，单单在iOS10.3.3上不动。特别迷，花了一下午的时间排查这个问题。最终咨询了@DreamPiggy ，才把这个问题搞清楚。 0x1原因APNG的数据块有IHDR、acTL、fcTL、IDAT、fdAT等类型。每帧APNG的图像由1个FCTL，&gt;=1个(通常是1~2个)IDAT图像组成。其中FCTL是每帧的控制信息，IDAT是图像信息。在iOS10.3.3系统中，当每帧APNG的fdAT&gt;=3时，系统解码会出错，导致解码失败，并取第一帧信息作为解码结果，即展示PNG静图。 简单的说，即：iOS 10.3.3系统BUG，在APNG较大且较复杂时，APNG解码失败，返回首帧PNG静图。 0x2APNG分析过程中，第一步就是查询APNG的标准，发现这块文档十分匮乏，尤其是中文文档。在此，按个人理解整理一份。 1.APNG结构一个流传甚广的图如下。PNG的基本结构是PNG签名(PNG Signature)+图像头(IHDR)+数据块(IDAT)+结束块(IEND)，4部分组成，而APNG则是在此基础上扩展，主要是增加了acTL控制块保存整体动图控制信息，将N张图片的IDAT取出来作为每一帧的信息，并在每一帧增加fcTL控制卡保存每帧图像的控制信息。 2.手工解码APNG只知道APNG的结构，当出现APNG相关问题的时候，你还是不知道是怎么回事。下面我以上面有问题的APNG为例，手工解码APNG。从结构上分，APNG有PNG签名、数据块，两种类型。 1）PNG签名整个文件的前8个byte是PNG签名头，为8950 4e47 0d0a 1a0a，将这8个byte转为ascii就是PNG 2）数据块类型数据块(chunk)常见类型有：IHDR、acTL、fcTL、IDAT、fdAT、IEND 基本格式如下： 序号 描述 长度(byte) 1 chunk内容长度 4 2 chunk类型 4 3 chunk内容 由1chunk内容长度决定 4 校验码 4 其中chunk类型将其由hex转为ascii，即为对应的值，如： ①IHDR 长度(byte) 内容 意义 4 0000 000d chunk内容长度为13 byte 4 4948 4452 IDHR 13 0000 0465 0000 01ea 0806 0000 00 见下标 4 ad34 f3f4 校验码 IHDR的内容意义如下： 描述 长度(byte) 内容 图片宽度 4 byte 0000 0465 图片高度 4 byte 0000 01ea 图像深度 1 byte 8 颜色类型 1 byte 6 压缩方法 1 byte 0 过滤方式 1 byte 0 扫描方式 1 byte 0 ②acTL 长度 内容 意义 4 byte 0000 0008 chunk内容长度为8 byte 4 byte 6163 544c acTL 8 byte 0000 000a 0000 0000 前4byte为帧数，10帧；后4byte为循环次数，无限循环； 4 byte ad34 f3f4 校验码 ③fcTL 长度 内容 意义 4 byte 0000 001a chunk内容长度为26 byte 4 byte 6663 544c fcTL 26 byte 00 0000 0000 0004 6500 0001 ea00 0000 0000 0000 0000 0c00 6400 00 略 4 byte 50 8aec fb 校验码 ④IDAT 长度 内容 意义 4 byte 00 0080 00 chunk内容长度为32768 byte 4 byte 4944 4154 IDAT 32768 byte 略 略 4 byte 876e ca46 校验码 3）数据块类型补充在动图中，第1帧称为关键帧，其他帧信息在压缩算法下需要有第1帧计算得来。在APNG中，关键帧就是IDAT，第2帧开始为fdAT。 根据数据块类型可知，通常37byte开始，为acTL数据块，可以以此作为是否为APNG的标识。但是这个不是强制的，你也可以自己定义数据块类型，在IHDR之后添加相应信息。 例如，为APNG添加了签名和时间戳后，在Safari下显示是正常的，在Chrome下就无法正常加载。即：Chrome和Safari对于APNG的标准解读不同，且明显Chrome对APNG的标准支持不完善。 3.参考文章PNG规范中文解读：png的故事：获取图片信息和像素内容 PNG标准英文文档：PNG (Portable Network Graphics) Specification, Version 1.2APNG标准英文文档：APNG SpecificationAPNG介绍：APNG那些事 APNG分析网站：https://animatedpngs.com/HEX转ascii网站：https://www.rapidtables.com/convert/number/hex-to-ascii.html 0x3问题分析1.分析图片数据在有以上的对APNG的知识储备后，就可以开始进行正式的问题分析了。 对多组图片手动解码，分析fdAT数据发现，fdAT在同一帧中连续3次或以上，会导致在iOS10.3.3上解码失败。结论以猜测为主，部分证实，暂无实锤。相关数据就不放了。有兴趣的同学可以自己解析一下看看。 2.ImageIO的符号断点ImageIO有一个LogDebug函数，添加符号断点后，可以断到这个符号，侧面印证了此时系统APNG解码失败。 0x4总结有必要总结下。各大厂对图片格式的解读是不一致的，尤其是在动图上，在一些特定场景下就会踩坑。目前我已知的有： 1.本文的问题，APNG的fdAT&gt;=3时，苹果系统(iOS/mac os)解码失败，变为静图；2.APNG添加签名后，Android解码失败，无法展示；3.安卓和苹果对GIF的循环次数理解不一致，通常可以在苹果解GIF时循环次数加1，以保持多端一致； 其他隐藏的坑不知道还有多少。]]></content>
      <categories>
        <category>iOS/OC</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>动图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[iOS/OC]platform_memmove的Crash]]></title>
    <url>%2F2018%2F05%2F04%2FiOS-OC-platform-memmove%E7%9A%84Crash%2F</url>
    <content type="text"><![CDATA[0x0 背景这个问题是今年1月底排查的，gif/apng动图播放时在iOS11以下会小概率闪退。是个比较有趣的Crash，重新记录一下。 典型堆栈： 1234567891011121314151617181920#13. Crashed: PINAnimatedImage disk write queue0 libsystem_platform.dylib 0x1915d4e60 _platform_memmove + 961 ImageIO 0x1943c0a74 GIFReadPlugin::copyImageBlockSet(InfoRec*, CGImageProvider*, CGRect, CGSize, __CFDictionary const*) + 31922 ImageIO 0x1943c0a74 GIFReadPlugin::copyImageBlockSet(InfoRec*, CGImageProvider*, CGRect, CGSize, __CFDictionary const*) + 31923 ImageIO 0x1943bf7c4 GIFReadPlugin::CopyImageBlockSetProc(void*, CGImageProvider*, CGRect, CGSize, __CFDictionary const*) + 1244 ImageIO 0x19422073c IIOImageProviderInfo::copyImageBlockSetWithOptions(CGImageProvider*, CGRect, CGSize, __CFDictionary const*) + 4965 ImageIO 0x19421e640 IIOImageProviderInfo::CopyImageBlockSetWithOptions(void*, CGImageProvider*, CGRect, CGSize, __CFDictionary const*) + 3566 CoreGraphics 0x1939eeb24 CGImageProviderCopyImageBlockSet + 2207 CoreGraphics 0x193c833ac imageProvider_getBytes + 888 CoreGraphics 0x193ab30e0 CGDataProviderCopyData + 2809 Pinterest 0x100a46238 __94+[PINAnimatedImageManager processAnimatedImage:temporaryDirectory:infoCompletion:decodedPath:]_block_invoke.225 (PINAnimatedImageManager.m:397)10 libdispatch.dylib 0x1913d21fc _dispatch_call_block_and_release + 2411 libdispatch.dylib 0x1913d21bc _dispatch_client_callout + 1612 libdispatch.dylib 0x1913e012c _dispatch_queue_serial_drain + 24013 libdispatch.dylib 0x1913d59a4 _dispatch_queue_invoke + 65214 libdispatch.dylib 0x1913e08d8 _dispatch_queue_override_invoke + 36015 libdispatch.dylib 0x1913e234c _dispatch_root_queue_drain + 57216 libdispatch.dylib 0x1913e20ac _dispatch_worker_thread3 + 12417 libsystem_pthread.dylib 0x1915db2a0 _pthread_wqthread + 128818 libsystem_pthread.dylib 0x1915dad8c start_wqthread + 4 openradar的问题链接 SDWebImage的问题链接 该问题在Google上能搜到的结果还是不少的，但是有效信息很少。比较有用的是openradar上提到的iOS10.3beta上已经修复了该问题。可以略微松一口气，最不济可以甩锅给苹果了。甚至如果你的APP只支持iOS11(可能性不大，但是万一有呢)，都可以直接忽略了。 0x1 Crash原因虽然是系统的BUG，但是还是要搞清楚Crash的原因，尽量在业务代码上避免该问题引发其他的风险。排查过程比较艰辛，只说最终结果吧： CGContextDrawImage();不再保证对imageRef的原子操作。当对于1个imageRef，有多个线程并发绘制时，会触发buffer的memcmp的Crash 根据问题原因可以知道，其实该Crash在多线程同时解码同1份imageRef时才会Crash，因此如果没有引入SDWebImage/YYImage等三方图片库，系统默认主线程解码是不会有改Crash的。 另外，静图解码也是有概率Crash，但是网上反馈比较少，主要原因也是概率的问题。和一般的多线程Crash一样，次数多了概率才打，在相同的业务场景下，动图解码的频次远高于静图，因此动图更容易触发该Crash。 0x2 Crash防护知道Crash原因后，防护相对就比较简单了，只要保证不会对同一个image资源同时解码就可以了。1个简单的方法是在解码时，使用UIImage作为input，对UIImage进行多线程保护。如： 123@synchronized(image) &#123; return [self decodedImageWithCGImageRef:image.CGImage];&#125;]]></content>
      <categories>
        <category>iOS/OC</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Crash</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[iOS/OC]SDWebImage和LKImage对比]]></title>
    <url>%2F2018%2F05%2F04%2FiOS-OC-SDWebImage%E5%92%8CLKImage%E5%AF%B9%E6%AF%94%2F</url>
    <content type="text"><![CDATA[0x0背景LKImageKit是腾讯开源的一个高性能图片加载框架，虽然第一时间下载了源码，但是只是简单的看了框架，没有细致的研读源码。最近空闲下来，学习了一下LKImageKit源码，其中有很多巧妙的实现。本文将通过1张图片的加载流程，对比两个图片框架。 0x1正文LKImageKit和SDWebImage分别选用了两种不同的图片加载方案。LKImageKit的图片加载是提供了一个LKImageView，加载图片需要使用指定的容器。SDWebImage是写了一个Category，加载图片可以使用系统的UIImageView或其子类。流程上。 1.入口发起一个图片加载，LKImageKit是在layoutSubviews时，发起1次图片加载，SDWebImage提供了1个主动发起图片加载请求的接口sd_setImageWithUrl LKImageKit发起图片加载： 123456789// 上层调用imageView.URL = [NSURL urlWithString:@&quot;https://xxx.png&quot;];imageView.request.synchronized = YES;// 底层加载- (void)layoutSubviews &#123; [super layoutSubviews]; [self layoutAndLoad];&#125; SDWebImage发起图片加载 1234// 上层调用[imageView sd_setImageWithURL:[NSURL URLWithString:@&quot;&quot;]];// 之后开始下载流程 两个图片库都提供了加载回调，不同的是，LKImageKit提供的是delegate的方法，SDWebImage提供的是callback LKImageKit 1234567@protocol LKImageViewDelegate &lt;NSObject&gt;@optional- (void)LKImageViewImageLoading:(LKImageView *)imageView request:(LKImageRequest *)request;- (void)LKImageViewImageDidLoad:(LKImageView *)imageView request:(LKImageRequest *)request;@end SDWebImage 1typedef void(^SDWebImageCompletionBlock)(UIImage * _Nullable image, NSError * _Nullable error, SDImageCacheType cacheType, NSURL * _Nullable imageURL); 2.下载LKImageKit进行图片下载会统一由LKImageManger进行管理，LKImageKit提供的请求合并的优化就是通过LKImageManager进行的。请求会通过blockOperation放到1个operationQueue中进行多个加载请求的队列管理。 资源加载则由LKImageLoader进行，由单例LKImageLoaderManager进行管理。网络下载是LKImageNetworkFileLoader进行，使用了NSURLSession，本地图片加载通过LKImageLocalFileLoader进行。 1234[requestLV2.loader dataWithRequest:requestLV2 callback:^(LKImageRequest *requestLV2, NSData *data, float progress, NSError *error) &#123; [self loadDataRequestFinished:requestLV2 data:data progress:progress error:error]; &#125;]; SDWebImage进行图片下载由SDWebImageManager进行管理。类似的，在SDWebImage 5.0版本开始，也使用SDWebImageLoader进行加载，使用SDWebImageLoadersManager进行管理。网络下载使用SDWebImageDownloader进行。使用NSOperation进行下载管理。 1[self downloadImageWithURL:url options:downloaderOptions context:context progress:progressBlock completed:completedBlock]; 对比可知，LKImageKit在下载前做了很多优化，下载流程的管理更加细腻。SDWebImage的下载过程由于历史原因，虽然在5.0上大刀阔斧的改造了很多东西，但是整体流程会显得更加笨重一些。 3.图片解码LKImageKit和SDWebImage的图片解码大同小异，以LKImageKit为例： 1234567891011// 由LKImageDecoderManager进行解码器的管理UIImage *image = [decoder imageFromData:data request:request error:&amp;decode_error];// 普通静图result = [UIImage imageWithData:data scale:[UIScreen mainScreen].scale];// 1帧的动图UIImage *image = [UIImage imageWithCGImage:imageRef scale:[UIScreen mainScreen].scale orientation:orientation];// 动图UIImage *image = [UIImage animatedImageWithImages:images duration:INFINITY]; 4.图片解压缩图片解压缩是将解码后的image解出bitmap，从而避免系统主线程解压缩导致的主线程卡顿的问题。这里两个库也都是大同小异。以LKImageKit为例： 1234CGContextRef context = CGBitmapContextCreate(NULL, clipSize.width, clipSize.height, 8, 0, colorspace, bitmapInfo);CGContextDrawImage(context, imageRect, input.CGImage);CGImageRef cgimage = CGBitmapContextCreateImage(context);UIImage *image = [UIImage imageWithCGImage:cgimage scale:screenScale orientation:input.imageOrientation]; 不同的是，LKImageKit因为是用的指定的容器进行全链路的图片加载，所以可以通过打通全链路，在解压缩时，提前获取加载的容器大小，然后根据容器的大小进行按需解bitmap，从而节约内存。 开源SDWebImage并没有这个优化。我自己在SDWebImage上实现了一套类似的方案，需要从接口调用到解bitmap全链路打通，透传容器大小按需解码，以及对带alpha通道的webp图片等的异常case处理。略有不同的是，LKImageKit使用了image的scale属性，SDWebImage的scale默认1，需要做额外的pt-&gt;px的转换。后续有机会会把代码提到开源仓库。 0x2总结两种图片方案有各自的业务场景和出发点，各有好处。 LKImageKit方案对图片的管理能力更强，图片加载的流程对于框架更加透明；SDWebImage方案更加灵活，尤其在5.0后，各种扩展性都非常好，LKImageKit的下载、解码管理有明显的借鉴SDWebImage的痕迹。另外，对于图片的加载流程，LKImageKit更加细腻，比如请求合并，按需解bitmap。 同时，从商业角度看，微信、QQ等大型App，是需要对图片加载全链路进行埋点监控的，这种强势掌控加载细节的LKImageKit方案，处理其这样的需求更加便利。猜想腾讯内部的LKImageKit版本应该还有埋点监控、网络接管等更多模块的适配接口，开源的只是删减了相关依赖的外部版本。]]></content>
      <categories>
        <category>iOS/OC</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>图片</tag>
        <tag>SDWebImage</tag>
        <tag>LKImageKit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开始]]></title>
    <url>%2F2018%2F05%2F04%2F%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[12年开始工作，马上工作六年了。最近发现积累的很多东西，都随手乱记，没有一个系统的地方进行整理。心血来潮开个博客，记录一些东西，希望能坚持。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
